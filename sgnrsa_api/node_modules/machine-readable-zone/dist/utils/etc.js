"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var validate_args_1 = require("./validate-args");
var os_1 = require("os");
var PASSPORT_NUMBER_LENGTH = 9;
var PASSPORT_NUMBER_CONSTRAINTS = {
    exactLength: PASSPORT_NUMBER_LENGTH,
};
exports.NEW_LINE = os_1.EOL;
exports.extractSupportedCommandLineArgs = function (args) {
    return {
        version: validate_args_1.getBooleanOrDefault(args.version),
        help: validate_args_1.getBooleanOrDefault(args.help),
        countries: validate_args_1.getBooleanOrDefault(args.countries),
        user: {
            firstName: validate_args_1.getStringOrDefault(args.firstName),
            lastName: validate_args_1.getStringOrDefault(args.lastName),
            passportNumber: validate_args_1.getStringOrDefault(args.passportNumber),
            countryCode: validate_args_1.getStringOrDefault(args.countryCode),
            nationality: validate_args_1.getStringOrDefault(args.nationality),
            birthday: validate_args_1.getStringOrDefault(args.birthday),
            gender: validate_args_1.getStringOrDefault(args.gender),
            validUntilDay: validate_args_1.getStringOrDefault(args.validUntilDay),
            personalNumber: validate_args_1.getStringOrDefault(args.personalNumber, validate_args_1.DEFAULT_PERSONAL_NUMBER),
        },
    };
};
exports.SCHEMA = {
    firstName: validate_args_1.validateNonEmpty,
    lastName: validate_args_1.validateNonEmpty,
    passportNumber: validate_args_1.validateNumeric(PASSPORT_NUMBER_CONSTRAINTS),
    countryCode: validate_args_1.validateCountryCode,
    nationality: validate_args_1.validateCountryCode,
    birthday: validate_args_1.validateDate,
    gender: validate_args_1.validateGender,
    validUntilDay: validate_args_1.validateDate,
    personalNumber: validate_args_1.validatePersonalNumber,
};
exports.validateGenerationData = function (args, schema) {
    if (schema === void 0) { schema = exports.SCHEMA; }
    var errors = validate_args_1.validateFields(args.user, schema);
    return {
        errors: errors,
        isValid: errors.length === 0,
    };
};
exports.areObjectsEqualDeeply = function (obj1, obj2) {
    var keys = Object.keys(__assign({}, obj1, obj2));
    return keys.every(function (key) {
        var obj1Type = typeof obj1;
        var obj2Type = typeof obj2;
        if (obj1Type !== obj2Type) {
            return false;
        }
        if (obj1Type === 'object') {
            return exports.areObjectsEqualDeeply(obj1[key], obj2[key]);
        }
        return obj1[key] === obj2[key];
    });
};
//# sourceMappingURL=etc.js.map