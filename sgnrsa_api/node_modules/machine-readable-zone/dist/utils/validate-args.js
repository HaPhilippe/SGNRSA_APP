"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var countries = require('../../data/countries.json');
exports.NO_ERROR = null;
var DEFAULT_ERROR = 'Unknown error';
exports.DATE_DELIMITER = '.';
var DATE_PATTERN = new RegExp("^[0-9]{1,2}\\" + exports.DATE_DELIMITER + "[0-9]{1,2}\\" + exports.DATE_DELIMITER + "[0-9]{1,4}$", 'ig');
var ALLOWED_GENDERS = ['M', 'F'];
var PERSONAL_NUMBER_LENGTH = 14;
var PERSONAL_NUMBER_CONSTRAINS = {
    exactLength: PERSONAL_NUMBER_LENGTH,
};
var FILLER = '<';
exports.DEFAULT_PERSONAL_NUMBER = FILLER.repeat(PERSONAL_NUMBER_LENGTH);
exports.isArray = function (value) { return Array.isArray(value); };
exports.isString = function (value) { return typeof value === 'string'; };
exports.isBoolean = function (value) { return typeof value === 'boolean'; };
exports.isNumeric = function (value) {
    if (exports.isString(value) && value.match(/[^0-9]/g) != null) {
        return false;
    }
    try {
        var parsed = parseFloat(value);
        return !isNaN(parsed);
    }
    catch (e) {
        return false;
    }
};
exports.getStringOrDefault = function (value, defaultValue) {
    if (defaultValue === void 0) { defaultValue = ''; }
    return exports.isString(value) && (value != null) ? value : defaultValue;
};
exports.getBooleanOrDefault = function (value, defaultValue) {
    if (defaultValue === void 0) { defaultValue = false; }
    return exports.isBoolean(value) && (value != null) ? value : defaultValue;
};
var getNumberOrDefault = function (value, defaultValue) {
    if (defaultValue === void 0) { defaultValue = 0; }
    return exports.isNumeric(value) ? parseFloat(value) : defaultValue;
};
var isDateString = function (value) { return exports.isString(value) && value.match(DATE_PATTERN); };
var isDateInstance = function (value) { return value instanceof Date; };
exports.getDatePartsFromString = function (value) {
    var _a = value.split(exports.DATE_DELIMITER), d = _a[0], m = _a[1], y = _a[2];
    var day = getNumberOrDefault(d, 0);
    var month = getNumberOrDefault(m, -1);
    var year = getNumberOrDefault(y, 0);
    return { day: day, month: month, year: year };
};
var getDateFromString = function (value) {
    var _a = exports.getDatePartsFromString(value), day = _a.day, month = _a.month, year = _a.year;
    var date = new Date(Date.UTC(year, month - 1, day));
    if (date == null ||
        date.getDate() !== day ||
        date.getMonth() !== month - 1 ||
        date.getFullYear() !== year) {
        return null;
    }
    return date;
};
var getDateOrDefault = function (value, defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    if (isDateString(value)) {
        var date = getDateFromString(value);
        if (isDateInstance(date)) {
            return date;
        }
    }
    return defaultValue;
};
var isError = function (error) { return error !== exports.NO_ERROR; };
exports.validateNonEmpty = function (value) {
    var str = exports.getStringOrDefault(value);
    if (str.trim().length === 0) {
        return 'value should non be empty';
    }
    return exports.NO_ERROR;
};
exports.validateNumeric = function (constraints) {
    if (constraints === void 0) { constraints = {}; }
    return function (value) {
        var error = exports.validateNonEmpty(value);
        if (error !== exports.NO_ERROR) {
            return error;
        }
        var exactLength = constraints.exactLength, minLength = constraints.minLength, maxLength = constraints.maxLength, minValue = constraints.minValue, maxValue = constraints.maxValue;
        if (!exports.isNumeric(value)) {
            return 'value should be numeric';
        }
        var str = exports.getStringOrDefault(value);
        if (exactLength != null && str.length !== exactLength) {
            return "value " + str + " should have exactly " + exactLength + " digits";
        }
        if (minLength != null && str.length < minLength) {
            return "value " + str + " should have more than " + minLength + " digits";
        }
        if (maxLength != null && str.length > maxLength) {
            return "value " + str + " should have less than " + maxLength + " digits";
        }
        var number = getNumberOrDefault(str);
        if (minValue != null && number < minValue) {
            return "value " + str + " should be bigger than " + minValue;
        }
        if (maxValue != null && number > maxValue) {
            return "value " + str + " should be smaller than " + maxValue;
        }
        return exports.NO_ERROR;
    };
};
exports.validateCountryCode = function (value) {
    var error = exports.validateNonEmpty(value);
    if (error !== exports.NO_ERROR) {
        return error;
    }
    var code = exports.getStringOrDefault(value).toUpperCase();
    var country = countries.find(function (c) { return c.code === code; });
    if (country == null) {
        var similarCountries = countries
            .filter(function (c) { return c.code.startsWith(code); })
            .map(function (c) { return c.code; });
        return "country " + code + " not found." + (similarCountries.length > 0
            ? " Did you mean " + similarCountries.join(', ') + "?"
            : '');
    }
    return exports.NO_ERROR;
};
exports.validateDate = function (value) {
    var error = exports.validateNonEmpty(value);
    if (error !== exports.NO_ERROR) {
        return error;
    }
    var birthday = getDateOrDefault(value);
    if (birthday == null) {
        return "value " + value + " should be an existing date in dd.mm.yyyy format";
    }
    return exports.NO_ERROR;
};
exports.validateGender = function (value) {
    var error = exports.validateNonEmpty(value);
    if (error !== exports.NO_ERROR) {
        return error;
    }
    var gender = exports.getStringOrDefault(value);
    if (!ALLOWED_GENDERS.includes(gender.toUpperCase())) {
        return "value " + value + " should be a gender: M (male) or F (female)";
    }
    return exports.NO_ERROR;
};
exports.validatePersonalNumber = function (value) {
    if (exports.isNumeric(value)) {
        var error = exports.validateNumeric(PERSONAL_NUMBER_CONSTRAINS)(value);
        if (error !== exports.NO_ERROR) {
            return error;
        }
        return exports.NO_ERROR;
    }
    if (exports.getStringOrDefault(value, exports.DEFAULT_PERSONAL_NUMBER) === exports.DEFAULT_PERSONAL_NUMBER) {
        return exports.NO_ERROR;
    }
    return "value " + value + " should be a number, a filler (" + exports.DEFAULT_PERSONAL_NUMBER + ") or an empty value";
};
exports.validateFields = function (data, schema) {
    return Object.keys(schema).reduce(function (errors, fieldName) {
        var validator = schema[fieldName];
        var error = validator(data[fieldName]);
        if (isError(error)) {
            errors.push({
                fieldName: fieldName,
                error: exports.getStringOrDefault(error, DEFAULT_ERROR),
            });
        }
        return errors;
    }, []);
};
//# sourceMappingURL=validate-args.js.map