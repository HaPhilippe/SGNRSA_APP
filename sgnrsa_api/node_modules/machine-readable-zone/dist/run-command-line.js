"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parse_args_1 = require("./utils/parse-args");
var generate_mrz_1 = require("./generate-mrz");
var utils_1 = require("./utils");
var countries = require('../data/countries.json');
var packageJSON = require('../package.json');
var MAX_COUNTRY_CODE_LENGTH = 3;
var SPACES = '  ';
var NEW_LINE_SPACED = "" + utils_1.NEW_LINE + SPACES;
var ConsoleCommandType;
(function (ConsoleCommandType) {
    ConsoleCommandType[ConsoleCommandType["SHOW_HELP"] = 0] = "SHOW_HELP";
    ConsoleCommandType[ConsoleCommandType["SHOW_VERSION"] = 1] = "SHOW_VERSION";
    ConsoleCommandType[ConsoleCommandType["SHOW_COUNTRIES"] = 2] = "SHOW_COUNTRIES";
    ConsoleCommandType[ConsoleCommandType["GENERATE"] = 3] = "GENERATE";
})(ConsoleCommandType || (ConsoleCommandType = {}));
var getApplicationArgs = function (args) {
    return utils_1.extractSupportedCommandLineArgs(parse_args_1.default(args));
};
var getMRZGeneratorArgsFromCommandLineArgs = function (args) { return ({
    user: args.user,
}); };
exports.areArgsDefault = function (args) {
    var defaultArgs = getMRZGeneratorArgsFromCommandLineArgs(utils_1.extractSupportedCommandLineArgs({}));
    return utils_1.areObjectsEqualDeeply(args, defaultArgs);
};
var getCommandTypeFromCommandLineArgs = function (args) {
    if (args.help) {
        return {
            commandType: ConsoleCommandType.SHOW_HELP,
            params: {},
        };
    }
    if (args.version) {
        return {
            commandType: ConsoleCommandType.SHOW_VERSION,
            params: {},
        };
    }
    if (args.countries) {
        return {
            commandType: ConsoleCommandType.SHOW_COUNTRIES,
            params: {},
        };
    }
    var generatorArgs = getMRZGeneratorArgsFromCommandLineArgs(args);
    if (exports.areArgsDefault(generatorArgs)) {
        return {
            commandType: ConsoleCommandType.SHOW_HELP,
            params: {},
        };
    }
    var _a = utils_1.validateGenerationData(generatorArgs), isValid = _a.isValid, errors = _a.errors;
    if (!isValid) {
        return {
            commandType: ConsoleCommandType.SHOW_HELP,
            params: { errors: errors },
        };
    }
    return {
        commandType: ConsoleCommandType.GENERATE,
        params: {
            args: generatorArgs,
        },
    };
};
var errorsToString = function (errors) {
    if (errors === void 0) { errors = []; }
    return errors
        .map(function (_a) {
        var error = _a.error, fieldName = _a.fieldName;
        return "Field \"" + fieldName + "\" has wrong format: " + error;
    })
        .join(NEW_LINE_SPACED);
};
var helpToString = function () { return [
    "Syntax: " + packageJSON.name + " [options]",
    'Options:',
    '--first-name:          [*] First name',
    '--last-name:           [*] Last name',
    '--passport-number:     [*] Passport number (9 digits)',
    '--country-code:        [*] Country code (ISO 3166-1 alpha-3*)',
    '--nationality:         [*] Nationality (ISO 3166-1 alpha-3*)',
    '--gender:              [*] Sex/gender (M/F)',
    '--valid-until-date:    [*] Date of validity (dd.mm.yyyy)',
    '--personal-number:         Personal number (14 digits)',
    '',
    '--countries            Print all the supported countries with codes',
    '--version              Print package version',
    '--help                 Print this help message',
].join(NEW_LINE_SPACED); };
var printHelp = function (errors) {
    if (errors === void 0) { errors = []; }
    var errorsPrinted = errorsToString(errors);
    if (errorsPrinted !== '') {
        console.log("" + NEW_LINE_SPACED + errorsPrinted);
    }
    console.log("" + NEW_LINE_SPACED + helpToString());
};
var printVersion = function () { return console.log(SPACES + "Machine-readable zone code generator." + NEW_LINE_SPACED +
    ("Version: " + packageJSON.version)); };
var printCountries = function () { return console.log(countries.map(function (c) { return "" + SPACES + ' '.repeat(MAX_COUNTRY_CODE_LENGTH - c.code.length) + c.code + "    - " + c.name; })
    .join(utils_1.NEW_LINE)); };
var generateMRZFromCommandLineArgs = function (args) {
    var parsedArgs = getApplicationArgs(args);
    var _a = getCommandTypeFromCommandLineArgs(parsedArgs), commandType = _a.commandType, params = _a.params;
    switch (commandType) {
        case ConsoleCommandType.GENERATE:
            console.log(generate_mrz_1.default(params.args));
            return;
        case ConsoleCommandType.SHOW_VERSION:
            printVersion();
            return;
        case ConsoleCommandType.SHOW_COUNTRIES:
            printCountries();
            return;
        case ConsoleCommandType.SHOW_HELP:
        default:
            printHelp(params.errors);
            return;
    }
};
exports.default = generateMRZFromCommandLineArgs;
//# sourceMappingURL=run-command-line.js.map